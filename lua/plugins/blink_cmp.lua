return {
	-- {
	-- 	"saghen/blink.cmp",
	-- 	-- optional: provides snippets for the snippet source
	-- 	version = "0.*",
	-- 	dependencies = {
	-- 		"moyiz/blink-emoji.nvim",
	-- 		"Kaiser-yang/blink-cmp-dictionary",
	-- 		"giuxtaposition/blink-cmp-copilot",
	-- 		{
	-- 			"Kaiser-Yang/blink-cmp-dictionary",
	-- 			dependencies = { "nvim-lua/plenary.nvim" },
	-- 		},
	-- 	},
	--
	-- 	-- use a release tag to download pre-built binaries
	-- 	version = "*",
	-- 	-- AND/OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust
	-- 	-- build = 'cargo build --release',
	-- 	-- If you use nix, you can build from source using latest nightly rust with:
	-- 	-- build = 'nix run .#build-plugin',
	--
	-- 	---@module 'blink.cmp'
	-- 	---@type blink.cmp.Config
	-- 	opts = {},
	-- 	opts_extend = { "sources.default" },
	-- 	config = function()
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpMenu", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpMenuBorder", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpMenuSelection", { fg = "#282C34", bg = "#61AFEF" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpScrollBarThumb", { fg = "#ABB2BF", bg = "#3E4451" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpScrollBarGutter", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpLabel", { fg = "#ABB2BF", bg = "NONE" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpLabelDeprecated", { fg = "#5C6370", bg = "NONE", strikethrough = true })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpLabelMatch", { fg = "#61AFEF", bg = "NONE" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpLabelDetail", { fg = "#98C379", bg = "NONE" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpLabelDescription", { fg = "#98C379", bg = "NONE" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpKind", { fg = "#E06C75", bg = "NONE" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpSource", { fg = "#56B6C2", bg = "NONE" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpGhostText", { fg = "#3E4451", bg = "NONE", italic = true })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpDoc", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpDocBorder", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpDocSeparator", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpDocCursorLine", { fg = "#ABB2BF", bg = "#61AFEF" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpSignatureHelp", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpSignatureHelpBorder", { fg = "#ABB2BF", bg = "#282C34" })
	-- 		vim.api.nvim_set_hl(0, "BlinkCmpSignatureHelpActiveParameter", { fg = "#E5C07B", bg = "NONE" })
	-- 		require("blink.cmp").setup({
	--
	-- 			-- 'default' for mappings similar to built-in completion
	-- 			-- 'super-tab' for mappings similar to vscode (tab to accept, arrow keys to navigate)
	-- 			-- 'enter' for mappings similar to 'super-tab' but with 'enter' to accept
	-- 			-- See the full "keymap" documentation for information on defining your own keymap.
	-- 			snippets = {
	-- 				preset = "luasnip",
	-- 				expand = function(snippet)
	-- 					require("luasnip").lsp_expand(snippet)
	-- 				end,
	-- 				active = function(filter)
	-- 					if filter and filter.direction then
	-- 						return require("luasnip").jumpable(filter.direction)
	-- 					end
	-- 					return require("luasnip").in_snippet()
	-- 				end,
	-- 				jump = function(direction)
	-- 					require("luasnip").jump(direction)
	-- 				end,
	-- 			},
	-- 			keymap = {
	-- 				preset = "default",
	-- 				["<Tab>"] = { "snippet_forward", "fallback" },
	-- 				["<S-Tab>"] = { "snippet_backward", "fallback" },
	-- 				["<CR>"] = { "accept", "fallback" },
	-- 				["<Up>"] = { "select_prev", "fallback" },
	-- 				["<Down>"] = { "select_next", "fallback" },
	-- 				["<C-p>"] = { "select_prev", "fallback" },
	-- 				["<C-n>"] = { "select_next", "fallback" },
	--
	-- 				["<S-k>"] = { "scroll_documentation_up", "fallback" },
	-- 				["<S-j>"] = { "scroll_documentation_down", "fallback" },
	--
	-- 				["<C-space>"] = { "show", "show_documentation", "hide_documentation" },
	-- 				["<C-e>"] = { "hide", "fallback" },
	-- 				cmdline = {
	-- 					preset = "default",
	-- 					["<S-Tab>"] = { "select_prev", "fallback" },
	-- 					["<Tab>"] = { "select_next", "fallback" },
	-- 				},
	-- 			},
	--
	-- 			appearance = {
	-- 				-- Sets the fallback highlight groups to nvim-cmp's highlight groups
	-- 				-- Useful for when your theme doesn't support blink.cmp
	-- 				-- Will be removed in a future release
	-- 				use_nvim_cmp_as_default = true,
	-- 				-- Set to 'mono' for 'Nerd Font Mono' or 'normal' for 'Nerd Font'
	-- 				-- Adjusts spacing to ensure icons are aligned
	-- 				nerd_font_variant = "mono",
	-- 			},
	--
	-- 			-- Default list of enabled providers defined so that you can extend it
	-- 			-- elsewhere in your config, without redefining it, due to `opts_extend`
	-- 			sources = {
	-- 				default = { "lazydev", "lsp", "path", "snippets", "buffer", "emoji", "dictionary" },
	-- 				providers = {
	-- 					snippets = {
	-- 						score_offset = 110,
	-- 					},
	--
	-- 					lazydev = {
	-- 						name = "LazyDev",
	-- 						module = "lazydev.integrations.blink",
	-- 						-- make lazydev completions top priority (see `:h blink.cmp`)
	-- 						score_offset = 120,
	-- 					},
	-- 					lsp = {
	-- 						score_offset = 120,
	-- 					},
	-- 					buffer = {
	-- 						score_offset = 110,
	-- 					},
	-- 					-- path = {
	-- 					-- 	score_offset = 90,
	-- 					-- },
	-- 					dictionary = {
	-- 						module = "blink-cmp-dictionary",
	-- 						name = "Dict",
	-- 						-- Make sure this is at least 2.
	-- 						-- 3 is recommended
	-- 						min_keyword_length = 3,
	-- 						opts = {
	-- 							-- options for blink-cmp-dictionary
	-- 						},
	-- 					},
	-- 					emoji = {
	-- 						module = "blink-emoji",
	-- 						name = "Emoji",
	-- 						score_offset = 15, -- Tune by preference
	-- 						opts = { insert = true }, -- Insert emoji (default) or complete its name
	-- 					},
	-- 				},
	-- 			},
	-- 			completion = {
	-- 				documentation = {
	-- 					auto_show = true,
	-- 					auto_show_delay_ms = 500,
	--
	-- 					window = {
	-- 						border = "single",
	-- 					},
	-- 				},
	-- 				list = {
	-- 					selection = {
	-- 						preselect = true,
	-- 						auto_insert = true,
	-- 						-- preselect = function(ctx)
	-- 						-- 	return ctx.mode ~= "cmdline"
	-- 						-- end,
	-- 						-- auto_insert = function(ctx)
	-- 						-- 	return ctx.mode ~= "cmdline"
	-- 						-- end,
	-- 					},
	-- 				},
	-- 				trigger = {
	-- 					show_on_keyword = true,
	-- 				},
	-- 				menu = {
	-- 					-- winhighlight = "Normal:Normal,FloatBorder:FloatBorder,CursorLine:BlinkCmpMenuSelection,Search:None",
	-- 					draw = {
	-- 						columns = { { "kind_icon" }, { "label", gap = 1 }, { "source" } },
	-- 						components = {
	-- 							label = {
	-- 								text = require("colorful-menu").blink_components_text,
	-- 								highlight = require("colorful-menu").blink_components_highlight,
	-- 							},
	-- 							source = {
	-- 								text = function(ctx)
	-- 									local map = {
	-- 										["lsp"] = " LSP",
	-- 										["Lazydev"] = " LSP",
	-- 										["path"] = "󰉋 Path",
	-- 										["snippets"] = " Snippet",
	-- 										["emoji"] = "󰞅 Emoji",
	-- 										["buffer"] = " Buffer",
	-- 										["dictionary"] = " dictionary",
	-- 									}
	--
	-- 									return map[ctx.item.source_id]
	-- 								end,
	-- 								-- highlight = "BlinkCmpSource",
	-- 							},
	-- 						},
	-- 					},
	-- 				},
	-- 			},
	-- 		})
	-- 	end,
	-- },
	--
	-- {
	-- 	"saghen/blink.compat",
	-- 	-- use the latest release, via version = '*', if you also use the latest release for blink.cmp
	-- 	version = "*",
	-- 	-- lazy.nvim will automatically load the plugin when it's required by blink.cmp
	-- 	lazy = true,
	-- 	-- make sure to set opts so that lazy.nvim calls blink.compat's setup
	-- 	opts = {},
	-- },
	-- {
	--
	-- 	"xzbdmw/colorful-menu.nvim",
	-- 	config = function()
	-- 		-- You don't need to set these options.
	-- 		require("colorful-menu").setup({
	-- 			ls = {
	-- 				lua_ls = {
	-- 					-- Maybe you want to dim arguments a bit.
	-- 					arguments_hl = "@comment",
	-- 				},
	-- 				gopls = {
	-- 					-- By default, we render variable/function's type in the right most side,
	-- 					-- to make them not to crowd together with the original label.
	--
	-- 					-- when true:
	-- 					-- foo             *Foo
	-- 					-- ast         "go/ast"
	--
	-- 					-- when false:
	-- 					-- foo *Foo
	-- 					-- ast "go/ast"
	-- 					align_type_to_right = true,
	-- 					-- When true, label for field and variable will format like "foo: Foo"
	-- 					-- instead of go's original syntax "foo Foo".
	-- 					add_colon_before_type = false,
	-- 				},
	-- 				-- for lsp_config or typescript-tools
	-- 				ts_ls = {
	-- 					extra_info_hl = "@comment",
	-- 				},
	-- 				vtsls = {
	-- 					extra_info_hl = "@comment",
	-- 				},
	-- 				["rust-analyzer"] = {
	-- 					-- Such as (as Iterator), (use std::io).
	-- 					extra_info_hl = "@comment",
	-- 				},
	-- 				clangd = {
	-- 					-- Such as "From <stdio.h>".
	-- 					extra_info_hl = "@comment",
	-- 				},
	-- 				roslyn = {
	-- 					extra_info_hl = "@comment",
	-- 				},
	-- 				-- The same applies to pyright/pylance
	-- 				basedpyright = {
	-- 					-- It is usually import path such as "os"
	-- 					extra_info_hl = "@comment",
	-- 				},
	--
	-- 				-- If true, try to highlight "not supported" languages.
	-- 				fallback = true,
	-- 			},
	-- 			-- If the built-in logic fails to find a suitable highlight group,
	-- 			-- this highlight is applied to the label.
	-- 			fallback_highlight = "@variable",
	-- 			-- If provided, the plugin truncates the final displayed text to
	-- 			-- this width (measured in display cells). Any highlights that extend
	-- 			-- beyond the truncation point are ignored. When set to a float
	-- 			-- between 0 and 1, it'll be treated as percentage of the width of
	-- 			-- the window: math.floor(max_width * vim.api.nvim_win_get_width(0))
	-- 			-- Default 60.
	-- 			max_width = 60,
	-- 		})
	-- 	end,
	-- },
	-- {
	-- 	"catppuccin",
	-- 	optional = true,
	-- 	opts = {
	-- 		integrations = { blink_cmp = true },
	-- 	},
	-- },
}
