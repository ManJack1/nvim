return {
  -- "nvim-lualine/lualine.nvim",
  -- event = "VeryLazy",
  -- init = function()
  --   vim.g.lualine_laststatus = vim.o.laststatus
  --   if vim.fn.argc(-1) > 0 then
  --     -- set an empty statusline till lualine loads
  --     vim.o.statusline = " "
  --   else
  --     -- hide the statusline on the starter page
  --     vim.o.laststatus = 0
  --   end
  -- end,
  -- opts = function()
  --   -- PERF: we don't need this lualine require madness ðŸ¤·
  --   local lualine_require = require("lualine_require")
  --   lualine_require.require = require
  --
  --   local icons = LazyVim.config.icons
  --
  --   vim.o.laststatus = vim.g.lualine_laststatus
  --
  --   -- Dracula color palette
  --   local colors = {
  --     bg = "#282a36",
  --     fg = "#f8f8f2",
  --     selection = "#44475a",
  --     comment = "#6272a4",
  --     red = "#ff5555",
  --     orange = "#ffb86c",
  --     yellow = "#f1fa8c",
  --     green = "#50fa7b",
  --     purple = "#bd93f9",
  --     cyan = "#8be9fd",
  --     pink = "#ff79c6",
  --   }
  --
  --   -- Define Dracula theme for lualine
  --   local dracula = {
  --     normal = {
  --       a = { fg = colors.bg, bg = colors.purple, gui = "bold" },
  --       b = { fg = colors.fg, bg = colors.selection },
  --       c = { fg = colors.fg, bg = colors.bg },
  --       x = { fg = colors.fg, bg = colors.selection },
  --       y = { fg = colors.fg, bg = colors.selection },
  --       z = { fg = colors.bg, bg = colors.purple, gui = "bold" },
  --     },
  --     insert = {
  --       a = { fg = colors.bg, bg = colors.green, gui = "bold" },
  --       b = { fg = colors.fg, bg = colors.selection },
  --       z = { fg = colors.bg, bg = colors.green, gui = "bold" },
  --     },
  --     visual = {
  --       a = { fg = colors.bg, bg = colors.pink, gui = "bold" },
  --       b = { fg = colors.fg, bg = colors.selection },
  --       z = { fg = colors.bg, bg = colors.pink, gui = "bold" },
  --     },
  --     replace = {
  --       a = { fg = colors.bg, bg = colors.red, gui = "bold" },
  --       b = { fg = colors.fg, bg = colors.selection },
  --       z = { fg = colors.bg, bg = colors.red, gui = "bold" },
  --     },
  --     command = {
  --       a = { fg = colors.bg, bg = colors.cyan, gui = "bold" },
  --       b = { fg = colors.fg, bg = colors.selection },
  --       z = { fg = colors.bg, bg = colors.cyan, gui = "bold" },
  --     },
  --     inactive = {
  --       a = { fg = colors.comment, bg = colors.bg, gui = "bold" },
  --       b = { fg = colors.comment, bg = colors.bg },
  --       c = { fg = colors.comment, bg = colors.bg },
  --       x = { fg = colors.comment, bg = colors.bg },
  --       y = { fg = colors.comment, bg = colors.bg },
  --       z = { fg = colors.comment, bg = colors.bg },
  --     },
  --   }
  --
  --   local opts = {
  --     options = {
  --       theme = dracula, -- Use dracula theme instead of "auto"
  --       globalstatus = vim.o.laststatus == 3,
  --       disabled_filetypes = { statusline = { "dashboard", "alpha", "ministarter", "snacks_dashboard" } },
  --       component_separators = { left = "", right = "" },
  --       section_separators = { left = "", right = "" },
  --     },
  --     sections = {
  --       lualine_a = { "mode" },
  --       lualine_b = {
  --         {
  --           "branch",
  --           color = { fg = colors.purple, gui = "bold" },
  --         },
  --       },
  --
  --       lualine_c = {
  --         LazyVim.lualine.root_dir(),
  --         {
  --           "diagnostics",
  --           symbols = {
  --             error = icons.diagnostics.Error,
  --             warn = icons.diagnostics.Warn,
  --             info = icons.diagnostics.Info,
  --             hint = icons.diagnostics.Hint,
  --           },
  --           diagnostics_color = {
  --             error = { fg = colors.red },
  --             warn = { fg = colors.yellow },
  --             info = { fg = colors.cyan },
  --             hint = { fg = colors.green },
  --           },
  --         },
  --         { "filetype", icon_only = true, separator = "", padding = { left = 1, right = 0 } },
  --         {
  --           LazyVim.lualine.pretty_path(),
  --           color = function()
  --             return { fg = vim.bo.modified and colors.orange or colors.fg }
  --           end,
  --         },
  --       },
  --       lualine_x = {
  --         Snacks.profiler.status(),
  --         -- stylua: ignore
  --         {
  --           function() return require("noice").api.status.command.get() end,
  --           cond = function() return package.loaded["noice"] and require("noice").api.status.command.has() end,
  --           color = { fg = colors.cyan, bg = colors.selection },
  --         },
  --         -- stylua: ignore
  --         {
  --           function() return require("noice").api.status.mode.get() end,
  --           cond = function() return package.loaded["noice"] and require("noice").api.status.mode.has() end,
  --           color = { fg = colors.yellow, bg = colors.selection },
  --         },
  --         -- stylua: ignore
  --         {
  --           function() return "  " .. require("dap").status() end,
  --           cond = function() return package.loaded["dap"] and require("dap").status() ~= "" end,
  --           color = { fg = colors.green, bg = colors.selection },
  --         },
  --         -- stylua: ignore
  --         {
  --           require("lazy.status").updates,
  --           cond = require("lazy.status").has_updates,
  --           color = { fg = colors.pink, bg = colors.selection },
  --         },
  --         {
  --           "diff",
  --           symbols = {
  --             added = icons.git.added,
  --             modified = icons.git.modified,
  --             removed = icons.git.removed,
  --           },
  --           diff_color = {
  --             added = { fg = colors.green },
  --             modified = { fg = colors.yellow },
  --             removed = { fg = colors.red },
  --           },
  --           source = function()
  --             local gitsigns = vim.b.gitsigns_status_dict
  --             if gitsigns then
  --               return {
  --                 added = gitsigns.added,
  --                 modified = gitsigns.changed,
  --                 removed = gitsigns.removed,
  --               }
  --             end
  --           end,
  --           color = { bg = colors.selection },
  --         },
  --       },
  --       lualine_y = {
  --         {
  --           "progress",
  --           separator = " ",
  --           padding = { left = 1, right = 0 },
  --           color = { fg = colors.purple, bg = colors.selection, gui = "bold" },
  --         },
  --         {
  --           "location",
  --           padding = { left = 0, right = 1 },
  --           color = { fg = colors.fg, bg = colors.selection, gui = "bold" },
  --         },
  --       },
  --       lualine_z = {
  --         {
  --           function()
  --             return " " .. os.date("%R")
  --           end,
  --           color = { fg = colors.bg, bg = colors.purple, gui = "bold" },
  --         },
  --       },
  --     },
  --     inactive_sections = {
  --       lualine_a = {},
  --       lualine_b = {},
  --       lualine_c = { "filename" },
  --       lualine_x = { "location" },
  --       lualine_y = {},
  --       lualine_z = {},
  --     },
  --     tabline = {},
  --     winbar = {},
  --     inactive_winbar = {},
  --     extensions = { "neo-tree", "lazy", "fzf" },
  --   }
  --
  --   -- do not add trouble symbols if aerial is enabled
  --   -- And allow it to be overriden for some buffer types (see autocmds)
  --   if vim.g.trouble_lualine and LazyVim.has("trouble.nvim") then
  --     local trouble = require("trouble")
  --     local symbols = trouble.statusline({
  --       mode = "symbols",
  --       groups = {},
  --       title = false,
  --       filter = { range = true },
  --       format = "{kind_icon}{symbol.name:Normal}",
  --       hl_group = "lualine_c_normal",
  --     })
  --     table.insert(opts.sections.lualine_c, {
  --       symbols and symbols.get,
  --       cond = function()
  --         return vim.b.trouble_lualine ~= false and symbols.has()
  --       end,
  --     })
  --   end
  --
  --   -- Create command to toggle between Dracula and auto theme
  --   vim.api.nvim_create_user_command("LualineToggleDracula", function()
  --     local lualine = require("lualine")
  --     if vim.g.lualine_theme_is_dracula then
  --       lualine.setup({ options = { theme = "auto" } })
  --       vim.g.lualine_theme_is_dracula = false
  --       vim.notify("Lualine: Switched to auto theme", vim.log.levels.INFO)
  --     else
  --       lualine.setup({ options = { theme = dracula } })
  --       vim.g.lualine_theme_is_dracula = true
  --       vim.notify("Lualine: Dracula theme enabled", vim.log.levels.INFO)
  --     end
  --   end, { desc = "Toggle lualine Dracula theme" })
  --
  --   -- Set initial state
  --   vim.g.lualine_theme_is_dracula = true
  --
  --   return opts
  -- end,
}
